// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      UserRole @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders Order[]

  @@map("users")
}

model Product {
  id            String   @id @default(cuid())
  name          String
  description   String?
  price         Decimal  @db.Decimal(10, 2)
  stockQuantity Int      @default(0)
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  orderItems OrderItem[]

  @@map("products")
}

model Order {
  id               String      @id @default(cuid())
  orderNumber      String      @unique
  customerId       String
  totalAmount      Decimal     @db.Decimal(10, 2)
  status           OrderStatus @default(PLACED)
  paymentCollected Boolean     @default(false)
  placedAt         DateTime    @default(now())
  pickedAt         DateTime?
  shippedAt        DateTime?
  deliveredAt      DateTime?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  // Relations
  customer   User        @relation(fields: [customerId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id         String  @id @default(cuid())
  orderId    String
  productId  String
  quantity   Int
  unitPrice  Decimal @db.Decimal(10, 2)
  totalPrice Decimal @db.Decimal(10, 2)

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

enum UserRole {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PLACED
  PICKED
  SHIPPED
  DELIVERED
  CANCELLED
}
